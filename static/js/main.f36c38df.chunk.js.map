{"version":3,"sources":["components/GetToken.js","components/GenreList.js","components/BpmRange.js","components/GetSongs.js","components/SongList.js","components/CreatePlaylist.js","components/Body.js","App.js","serviceWorker.js","index.js"],"names":["GetToken","bareUrl","window","location","protocol","host","pathname","apiUrl","encodeURIComponent","react_default","a","createElement","Button_default","variant","color","className","target","href","this","tokenRequestUrl","Component","GenreList","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","updateChosenGenres","bind","assertThisInitialized","state","error","isLoaded","genres","data","options","map","x","push","value","label","_this2","self","spotify","getAvailableGenreSeeds","then","result","setState","formatGenreData","invalidateToken","status","react_select_esm","onChange","autoFocus","isMulti","placeholder","BpmRange","min","minCadence","max","maxCadence","Tooltip_default","title","InputLabel_default","disableAnimation","js_default","maxValue","minValue","draggableTrack","formatLabel","e","updateCadence","GetSongs","getRecommendations","songs","updateSongListNeedsUpdate","updateSongList","seeds","seedValues","forEach","element","limit","seed_genres","getSeedValues","chosenGenres","target_danceability","min_tempo","max_tempo","console","log","tracks","seedCount","songListNeedsUpdate","onClick","Search_default","disabled","SongList","listItems","songList","song","ListItem_default","key","uri","alignItems","ListItemAvatar_default","Avatar_default","src","album","images","url","ListItemText_default","primary","name","secondary","List_default","CreatePlaylist","getPlaylist","handleChange","isReturned","spotifyUser","playlistNameInputValue","playlistUrl","getUserId","event","uriArray","getMe","response","playlistID","addTracksToPlaylist","buildSongUriArray","playlistName","createPlaylist","id","public","fillPlaylist","external_urls","TextField_default","Save_default","OpenInNew_default","Fragment","Body","genreList","Spotify","haveToken","setAccessToken","token","length","tokenValid","components_GenreList","components_BpmRange","components_GetSongs","components_CreatePlaylist","components_SongList","components_GetToken","App","accessToken","components_Body","Boolean","hostname","match","ReactDOM","render","src_App_0","hash","getAccessToken","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f36c38df.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass GetToken extends Component {\r\n\r\n    tokenRequestUrl() {\r\n        const apiUrl = 'https://accounts.spotify.com/authorize';\r\n        const clientId = 'aed1fb11b28a4236aafa2241b827155f';\r\n        const scopes = ['playlist-modify-public'];\r\n        //Don't want to pass parameters or hashes to spotify api\r\n        const bareUrl = window.location.protocol + '//' + window.location.host + window.location.pathname;\r\n        const redirectUri = encodeURIComponent(bareUrl);\r\n        const responseType = 'token';   \r\n        const requestUrl = \r\n            apiUrl +\r\n            '?client_id=' + clientId +\r\n            '&redirect_uri=' + redirectUri +\r\n            '&response_type=' + responseType +\r\n            '&scope=' + encodeURIComponent(scopes)\r\n        ;     \r\n        return requestUrl;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Button  variant=\"contained\" color=\"primary\" className=\"get_token\" target = \"\" href={this.tokenRequestUrl()}>Authorize Spotify App</Button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GetToken","import React, { Component } from 'react';\r\nimport Select from 'react-select';\r\n\r\nclass GenreList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateChosenGenres = this.updateChosenGenres.bind(this);\r\n        \r\n        this.state = {\r\n            error: null,\r\n            isLoaded: false,\r\n            genres: ['Loading Genres'],            \r\n        };\r\n    }\r\n\r\n    //react-select options need to be value:label formatted\r\n    formatGenreData(data) {\r\n        let options = [];\r\n        data.genres.map(x => options.push({value: x, label: x}))\r\n        return options;\r\n    }\r\n\r\n    updateChosenGenres(genres) {\r\n        this.props.updateChosenGenres(genres);\r\n    }   \r\n\r\n    componentDidMount(){\r\n        let self = this;\r\n        this.props.spotify.getAvailableGenreSeeds()\r\n            .then(\r\n                (result) => {\r\n                self.setState({\r\n                    genres: self.formatGenreData(result),\r\n                    isLoaded: true\r\n                });\r\n            },\r\n            (error) => {\r\n                this.props.invalidateToken();\r\n            }\r\n        )\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        \r\n    }\r\n    \r\n    render() {\r\n        if (this.state.error){\r\n            if (this.state.error.status === 401)\r\n            return(<h3>Token expired, please request a new one:</h3>)\r\n            else\r\n                return(<h3>Error loading Genre List</h3>)\r\n        } else if (this.isLoaded){\r\n            return(<h3>Loading Genre List...</h3>)\r\n        } else {\r\n            return (\r\n                <ul className=\"genreList\">\r\n                    <Select \r\n                        onChange={this.updateChosenGenres} \r\n                        autoFocus={true} \r\n                        isMulti={true} \r\n                        options={this.state.genres}\r\n                        placeholder=\"Choose up to 5 genres (Required)\" \r\n                    />\r\n                </ul>\r\n            );\r\n        }\r\n\r\n    }\r\n}\r\n\r\nexport default GenreList","import React, { Component } from 'react';\r\nimport InputRange from 'react-input-range';\r\nimport 'react-input-range/lib/css/index.css'\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\n\r\nclass BpmRange extends Component {\r\n\r\n    render() { \r\n        var value = {\r\n            min: this.props.minCadence, max: this.props.maxCadence\r\n        }\r\n        return ( \r\n            <Tooltip title=\"Choose a range which is a multiple of your desired workout cadence\">\r\n                <div className=\"bpmRangeContainer\">\r\n                    <InputLabel disableAnimation={true} className=\"bpm_label\">Song range: {this.props.minCadence} - {this.props.maxCadence} beats per minute</InputLabel>\r\n                    <InputRange\r\n                        maxValue={200}\r\n                        minValue={50}\r\n                        draggableTrack={true}\r\n                        value={value}\r\n                        formatLabel={e => \"\"}\r\n                        onChange={value => this.props.updateCadence(value.min, value.max)} \r\n                        />\r\n                </div>\r\n            </Tooltip>\r\n        ); \r\n    }\r\n}\r\n \r\nexport default BpmRange;","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\n\r\nclass GetSongs extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.getRecommendations = this.getRecommendations.bind(this);\r\n    }\r\n\r\n    updateSongList(songs) {\r\n        this.props.updateSongListNeedsUpdate(false);\r\n        this.props.updateSongList(songs);\r\n    }\r\n\r\n    getSeedValues(seeds) {\r\n        let seedValues = [];\r\n        seeds.forEach(function(element){\r\n            seedValues.push(element.value);\r\n        })\r\n        return seedValues;\r\n    }\r\n\r\n    getRecommendations() {\r\n        let self = this;\r\n        let seeds = {\r\n            limit: 50,\r\n            seed_genres: this.getSeedValues(this.props.chosenGenres),\r\n            target_danceability: 0.9,\r\n            min_tempo: this.props.minCadence,\r\n            max_tempo: this.props.maxCadence\r\n        }\r\n        this.props.spotify.getRecommendations(seeds, function(error, data) {\r\n            if (error) console.log(error);\r\n            else self.updateSongList(data.tracks);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.props.seedCount >= 1 && this.props.seedCount <= 5) {\r\n            if (this.props.songListNeedsUpdate) {\r\n                return(\r\n                    <div>\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={this.getRecommendations}>\r\n                            Get Songs\r\n                            <SearchIcon className=\"rightIcon\" />\r\n                        </Button>\r\n                    </div>\r\n                )\r\n            } else {\r\n                return(\r\n                    <div>\r\n                        <Button variant=\"outlined\" color=\"primary\" onClick={this.getRecommendations}>\r\n                            Get Songs\r\n                            <SearchIcon className=\"rightIcon\" />\r\n                        </Button>\r\n                    </div>\r\n                )\r\n            }\r\n        } else if (this.props.seedCount === 0) {\r\n            return(<Button variant=\"contained\" color=\"primary\" disabled>Get Songs</Button>)\r\n        } else if (this.props.seedCount > 5) {\r\n            return(<div>Please select 5 or less options</div>)\r\n        } else {\r\n            return(<div>Something went wrong...</div>)\r\n        }\r\n    }\r\n}\r\n\r\nexport default GetSongs","import React, { Component } from 'react';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nclass SongList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  }\r\n    }\r\n\r\n    render() { \r\n        const listItems = this.props.songList.map((song) =>\r\n            <ListItem key={song.uri} alignItems=\"flex-start\">\r\n                <ListItemAvatar>\r\n                    <Avatar src={song.album.images[2].url}/>\r\n                </ListItemAvatar>\r\n                <ListItemText\r\n                    primary={song.name}\r\n                    secondary={song.album.name}\r\n                />\r\n            </ListItem>\r\n        );\r\n\r\n\r\n        return ( \r\n            <List className=\"songList\">\r\n                {listItems}\r\n            </List> \r\n        );\r\n    }\r\n}\r\n \r\nexport default SongList;","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button'\r\nimport SaveIcon from '@material-ui/icons/Save';\r\nimport OpenInNew from '@material-ui/icons/OpenInNew';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nclass CreatePlaylist extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.getPlaylist = this.getPlaylist.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.state = {\r\n            error: null,\r\n            isReturned: false,\r\n            spotifyUser: null,\r\n            playlistNameInputValue: '',\r\n            playlistUrl: '',\r\n\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.getUserId();\r\n    }\r\n    \r\n    handleChange(event) {\r\n        this.setState({playlistNameInputValue: event.target.value});\r\n    }\r\n\r\n    buildSongUriArray(songs) {\r\n        let uriArray = [];\r\n        songs.map(song => uriArray.push(song.uri));\r\n        return (uriArray);\r\n    }\r\n\r\n    getUserId() {\r\n        let self = this;\r\n        this.props.spotify.getMe().then(\r\n            function(response) {\r\n                self.setState({\r\n                    spotifyUser: response,\r\n                })\r\n            }, function(error) {\r\n                console.error(error);\r\n            }\r\n        )\r\n    }\r\n\r\n    fillPlaylist(playlistID) {\r\n        this.props.spotify.addTracksToPlaylist(playlistID,this.buildSongUriArray(this.props.songList)).then(\r\n            function() {\r\n            }, function(error) {\r\n                console.error(error);\r\n            }\r\n        )\r\n    }\r\n\r\n    getPlaylist() {\r\n        let self = this;\r\n        let playlistName = (this.state.playlistNameInputValue !== '' ? this.state.playlistNameInputValue : \"New Playlist\");\r\n        this.props.spotify.createPlaylist(\r\n            this.state.spotifyUser.id,\r\n            {\r\n                name: playlistName + \" (Cadence)\",\r\n                public: true\r\n            }\r\n        ).then(\r\n            function(response){\r\n                self.fillPlaylist(response.id);\r\n                self.setState({playlistUrl: response.external_urls.spotify})\r\n            }, function(error) {\r\n                console.error(error);\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n        if (this.state.spotifyUser != null) {\r\n            return(\r\n                <div className=\"create_playlist\">\r\n                    <TextField label=\"Playlist Name\"value={this.state.playlistNameInputValue} onChange={this.handleChange}></TextField>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={this.getPlaylist}>\r\n                        Create Playlist\r\n                        <SaveIcon className=\"rightIcon\" />    \r\n                    </Button>\r\n                    {this.state.playlistUrl !== \"\"\r\n                        ? <Button \r\n                            className=\"open_playlist\" \r\n                            variant=\"contained\" \r\n                            href={this.state.playlistUrl} \r\n                            target=\"_blank\"\r\n                        >\r\n                            Open Playlist\r\n                            <OpenInNew className=\"rightIcon\"/>    \r\n                        </Button>\r\n                        : <React.Fragment/>\r\n                    }\r\n                </div>\r\n            );\r\n        } else {\r\n            return(\r\n                <div></div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default CreatePlaylist","import React, { Component } from 'react';\r\nimport Spotify from 'spotify-web-api-js';\r\nimport GetToken from './GetToken.js';\r\nimport GenreList from './GenreList.js';\r\nimport BpmRange from './BpmRange.js';\r\nimport GetSongs from './GetSongs.js';\r\nimport SongList from './SongList.js';\r\nimport CreatePlaylist from './CreatePlaylist.js';\r\n\r\nclass Body extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.spotify = new Spotify();\r\n        if (this.props.haveToken) {\r\n            this.spotify.setAccessToken(this.props.token);\r\n        }\r\n        this.state = { \r\n            chosenGenres: [],\r\n            minCadence: 170,\r\n            maxCadence: 190,\r\n            songList: [],\r\n            songListNeedsUpdate: true\r\n        };\r\n    }\r\n\r\n    updateSongListNeedsUpdate = (status) => {\r\n        this.setState({songListNeedsUpdate: status});\r\n    }\r\n\r\n    updateChosenGenres = (genreList) => {\r\n        this.setState({\r\n            chosenGenres: genreList,\r\n            songListNeedsUpdate: true});\r\n    }\r\n    updateSongList = (songList) => {\r\n        this.setState({songList: songList});\r\n    }\r\n    updateCadence = (min, max) => {\r\n        this.setState({\r\n            minCadence: min,\r\n            maxCadence: max,\r\n            songListNeedsUpdate: true\r\n        })\r\n    }\r\n\r\n    render() { \r\n        this.seedCount = this.state.chosenGenres.length;\r\n        if (!this.props.haveToken || !this.props.tokenValid) {\r\n            return (  \r\n                <div className=\"bodyContainer\">\r\n                    <GetToken />\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"bodyContainer\">\r\n                    <GenreList spotify={this.spotify} invalidateToken={this.props.invalidateToken} updateChosenGenres={this.updateChosenGenres}/>\r\n                    <BpmRange minCadence={this.state.minCadence} maxCadence={this.state.maxCadence} updateCadence={this.updateCadence}/>\r\n                    <GetSongs \r\n                        spotify={this.spotify} \r\n                        invalidateToken={this.props.invalidateToken} \r\n                        updateSongList={this.updateSongList} \r\n                        seedCount={this.seedCount} \r\n                        chosenGenres={this.state.chosenGenres}\r\n                        minCadence={this.state.minCadence}\r\n                        maxCadence={this.state.maxCadence}\r\n                        songListNeedsUpdate={this.state.songListNeedsUpdate}\r\n                        updateSongListNeedsUpdate={this.updateSongListNeedsUpdate}\r\n                    />\r\n                    {this.state.songList.length > 0\r\n                        ? <CreatePlaylist \r\n                            spotify={this.spotify} \r\n                            songList={this.state.songList} />\r\n                        : <React.Fragment />\r\n                    }\r\n                    \r\n                    <SongList songList={this.state.songList} />\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n \r\nexport default Body;","import React, { Component  } from 'react';\r\nimport Body from './components/Body.js'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n\t\tsuper(props);\r\n\t\t\r\n\t\tthis.invalidateToken = this.invalidateToken.bind(this);\r\n\r\n    this.state = { \r\n    \thaveToken: this.props.accessToken ? true : false,\r\n    \ttokenValid: true\r\n    }\r\n\t}\r\n  \r\n  \tinvalidateToken() {\r\n  \t  \tthis.setState({tokenValid: false})\r\n  \t}\r\n\r\n  \trender() {\r\n  \t  \treturn(  \r\n  \t  \t  \t<div className=\"App\">\r\n  \t  \t  \t  \t<header className=\"App-header\">\r\n  \t  \t  \t  \t\t<h1>Cadence</h1>\r\n\t\t\t\t\t\t\t\t\t<h4>🚴 Workout playlist generator 🏃</h4>\r\n  \t  \t  \t  \t</header>\r\n  \t  \t  \t  \t<Body \r\n  \t  \t  \t  \t\ttoken={this.props.accessToken} \r\n  \t  \t  \t  \t\thaveToken={this.state.haveToken} \r\n  \t  \t  \t  \t\ttokenValid={this.state.tokenValid }\r\n  \t  \t  \t  \t\tinvalidateToken={this.invalidateToken}/>\r\n  \t  \t  \t</div>\r\n  \t  \t)\r\n  \t};\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction getAccessToken() {\n    var result = window.location.hash.match(/#(?:access_token)=([\\S\\s]*?)&/);\n    return (result ? result[1] : '');\n};\n\n\nReactDOM.render(<App accessToken={getAccessToken()}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}